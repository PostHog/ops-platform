// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           String        @id @default(cuid())
  priority     Priority
  reviewed     Boolean
  email        String        @unique
  salaries     Salary[]
  deelEmployee DeelEmployee?
  feedback     Feedback[]
}

model DeelEmployee {
  id                    String         @id
  name                  String
  title                 String
  team                  String
  workEmail             String?        @unique
  personalEmail         String?
  managerId             String?
  manager               DeelEmployee?  @relation("manager", fields: [managerId], references: [id])
  directReports         DeelEmployee[] @relation("manager")
  topLevelManagerId     String?
  topLevelManager       DeelEmployee?  @relation("topLevelManager", fields: [topLevelManagerId], references: [id])
  topLevelDirectReports DeelEmployee[] @relation("topLevelManager")
  employee              Employee?      @relation(fields: [workEmail], references: [email])
  startDate             DateTime
}

enum Priority {
  low
  high
  medium
}

model Salary {
  id                   String   @id @default(cuid())
  timestamp            DateTime @default(now())
  country              String
  area                 String
  locationFactor       Float
  level                Float
  step                 Float
  benchmark            String
  benchmarkFactor      Float
  totalSalary          Float
  changePercentage     Float
  changeAmount         Float
  exchangeRate         Float
  localCurrency        String
  totalSalaryLocal     Float
  amountTakenInOptions Float
  actualSalary         Float
  actualSalaryLocal    Float
  notes                String
  employeeId           String
  communicated         Boolean  @default(false)
  employee             Employee @relation(fields: [employeeId], references: [id])
}

model Feedback {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  feedback   String
  timestamp  DateTime @default(now())
}

enum CyclotronQueueName {
  send_keeper_test
  receive_keeper_test_results
  dead_letter
}

enum CyclotronJobState {
  running
  available
  failed
}

model CyclotronJob {
  id             String             @id @default(cuid())
  created        DateTime           @default(now())
  scheduled      DateTime           @default(now())
  queue_name     CyclotronQueueName
  lock_id        String?
  state          CyclotronJobState  @default(available)
  last_heartbeat DateTime           @default(now())
  data           Json
  failure_count  Int                @default(0)
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
