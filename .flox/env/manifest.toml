## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##   https://flox.dev/docs/reference/command-reference/manifest.toml/
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
nodejs.pkg-path = "nodejs"
postgresql.pkg-path = "postgresql"
gum.pkg-path = "gum"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"
PGHOSTADDR = "127.0.0.1"
PGUSER = "myuser"
PGPASSWORD = "password"
PGDATABASE = "mydb"
PGPORT = "9001"



## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
  # Autogenerated by Flox

  # Install nodejs dependencies
  npm install

  # End autogenerated by Flox

export PGDIR="$FLOX_ENV_CACHE/postgres"
export PGDATA=$PGDIR/data
export PGHOST=$PGDIR/run
export PGCONFIGFILE="$PGDIR/postgresql.conf"
export LOG_PATH=$PGHOST/LOG
export SESSION_SECRET="$USER-session-secret"

if [[ ! -d "$PGHOST" ]]; then
  mkdir -p "$PGHOST"
fi

if [[ ! -d "$PGDATA" ]]; then
  mkdir -p "$PGDATA"
  pg_initdb() {
    initdb "$PGDATA" \
      --locale=C \
      --encoding=UTF8 \
      -A md5 \
      --auth=trust \
      --username $PGUSER \
      --pwfile=<(echo $PGPASSWORD)
  }
  export -f pg_initdb  # This is needed for gum to be able to call function
  pg_initdb
  echo "âœ… Initialize PostgreSQL ($PGDATA)"

fi


#
if [[ ! -f "$PGCONFIGFILE" ]]; then
  tee -a $PGCONFIGFILE > /dev/null << EOF
listen_addresses = '$PGHOSTADDR';
port = '$PGPORT';
unix_socket_directories = '$PGHOST';
unix_socket_permissions = '0700';
EOF
  echo "âœ… Configure PostgreSQL ($PGCONFIGFILE)"
fi

pg_ctl -D "$PGDATA" -w start -o "-c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT" > /dev/null
if psql -lqt | cut -d \| -f 1 | grep -qw $PGDATABASE; then
  echo "âœ… Database '$PGDATABASE' already exists"
else
  createdb
  echo "âœ… Database '$PGDATABASE' created"
fi
pg_ctl -D "$PGDATA" -m fast -w stop > /dev/null



export DATABASE_URL="postgresql://$PGUSER:$PGPASSWORD@$PGHOSTADDR:$PGPORT/$PGDATABASE"

gum style --border double --margin "1 2" --padding "1 4" \
  'Start PostgreSQL in the background:' \
  '  ðŸ‘‰ flox services start' \
  '  ðŸ‘‰ flox activate --start-services' '' \
  'Try to connect to PostgreSQL:' \
  '  ðŸ‘‰ psql' '' \
  'Connection information:' \
  "  listen_addresses=$PGHOSTADDR" \
  "  port=$PGPORT"
 ''' 


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"

[services.database]
command = "postgres -D $PGDATA -c unix_socket_directories=$PGHOST -c listen_addresses=$PGHOSTADDR -p $PGPORT"

## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
